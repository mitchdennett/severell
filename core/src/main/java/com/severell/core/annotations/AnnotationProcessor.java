package com.severell.core.annotations;

import com.google.auto.service.AutoService;
import com.severell.core.http.*;
import com.severell.core.session.Session;
import com.squareup.javapoet.*;
import org.apache.maven.shared.utils.StringUtils;

import javax.annotation.processing.*;
import javax.lang.model.SourceVersion;
import javax.lang.model.element.*;
import javax.lang.model.type.MirroredTypesException;
import javax.lang.model.type.TypeMirror;
import javax.lang.model.util.Elements;
import javax.lang.model.util.Types;
import java.io.IOException;

import java.util.*;
import java.util.stream.Collectors;

@SupportedAnnotationTypes(
        "com.severell.core.http.*")
@SupportedSourceVersion(SourceVersion.RELEASE_11)
@AutoService(Processor.class)
public class AnnotationProcessor extends AbstractProcessor {

    private Filer filer;
    private Elements elements;
    private ProcessingEnvironment env;
    private Types typeUtils;
    private MethodSpec.Builder builder;
    private MethodSpec.Builder middlewareBuilder;

    @Override
    public synchronized void init(ProcessingEnvironment env) {
        filer = env.getFiler();
        elements = env.getElementUtils();
        this.env = env;
        typeUtils = env.getTypeUtils();

        builder = MethodSpec.methodBuilder("build");
        builder.addModifiers(Modifier.PUBLIC);
        TypeName listOfRouteExecutor = ParameterizedTypeName.get(ArrayList.class, RouteExecutor.class);
        builder.returns(listOfRouteExecutor);
        builder.addStatement("$T<$T> list = new $T<>()", ArrayList.class, RouteExecutor.class, ArrayList.class);



        middlewareBuilder = MethodSpec.methodBuilder("buildDefaultMiddleware");
        middlewareBuilder.addModifiers(Modifier.PUBLIC);
        TypeName listOfMethodExecutor = ParameterizedTypeName.get(ArrayList.class, MiddlewareExecutor.class);
        middlewareBuilder.returns(listOfMethodExecutor);
        middlewareBuilder.addStatement("$T<$T> defaultMiddleware = new $T<>()",ArrayList.class, MiddlewareExecutor.class, ArrayList.class);
    }

    @Override
    public boolean process(Set<? extends TypeElement> annotations, RoundEnvironment roundEnv) {
        try {

            if(!roundEnv.processingOver()) {
                int routeIndex = 0;

                for(Element element : roundEnv.getElementsAnnotatedWith(Route.class)){
                    routeIndex = processRoute(builder, routeIndex, element);
                }

                Set<? extends Element> middlewareList = roundEnv.getElementsAnnotatedWith(MiddlewareInclude.class);

                if(middlewareList.size() > 0) {
                    List<? extends TypeMirror> list = convertToTypeMirrors(middlewareList);
                    TypeMirror middlewareMirror = list.get(0);
                    List<? extends Element> listOfMiddlwareElements = elements.getTypeElement(middlewareMirror.toString()).getEnclosedElements();
                    List<? extends TypeMirror> listOfMiddlwareMirrors = listOfMiddlwareElements.stream()
                            .filter(field -> field.getKind() == ElementKind.FIELD).map(Element::asType).collect(Collectors.toList());
                    buildMiddleware(middlewareBuilder, listOfMiddlwareMirrors, "defaultMiddleware");
                }
            } else {
                builder.addStatement("return list");

                middlewareBuilder.addStatement("return defaultMiddleware");


                TypeSpec helloWorld = TypeSpec.classBuilder("_severell$RouteBuilder")
                        .addJavadoc("GENERATED CLASS: This class is generated by the severell-maven-plugin. DO NOT EDIT")
                        .addModifiers(Modifier.PUBLIC)
                        .addMethod(builder.build())
                        .addMethod(middlewareBuilder.build())
                        .build();


                JavaFile javaFile = JavaFile.builder("com.severell.core", helloWorld)
                        .build();

                javaFile.writeTo(filer);
            }

        } catch (IOException e) {
            e.printStackTrace();
            return false;
        }
        return true;
    }

    private int processRoute(MethodSpec.Builder builder, int routeIndex, Element element) {
        HttpMethod method = element.getAnnotation(Route.class).method();
        String path  = element.getAnnotation(Route.class).path();
        TypeMirror controllerMirror = element.getEnclosingElement().asType();

        String middlwareListName = "middlewareList" + routeIndex;
        builder.addCode("\n // ********* ROUTE: $S - $S ********* \n", method, path);
        CodeBlock.Builder LambdaBuilder = CodeBlock.builder()
                .add("(request, response, container) -> {\n").indent()
                .addStatement("$T cont = new $T()", controllerMirror,controllerMirror);


        Needs annotation = element.getEnclosingElement().getAnnotation(Needs.class);
        if(annotation != null) {
            Optional<String> needsStream = Arrays.stream(annotation.value()).filter(need -> "container".equals(need)).findAny();
            if(needsStream.isPresent()) {
                LambdaBuilder.addStatement("cont.setContainer(container)");
            }
        }


        ArrayList<String> paramList = new ArrayList<String>();
        List<? extends VariableElement> params = ((ExecutableElement) element).getParameters();

        resolve(LambdaBuilder, paramList, params);

        CodeBlock Lambda = LambdaBuilder.addStatement("cont.$L($L)", element.getSimpleName(), StringUtils.join(paramList.iterator(), ","))
                .unindent().add("}")
                .build();

        //We need to instantiate and resolve middleware here.
        Middleware middleware = element.getAnnotation(Middleware.class);

        List<? extends TypeMirror> value = null;
        if( middleware != null )

        {
            try
            {
                middleware.value();
            }
            catch( MirroredTypesException mte )
            {
                value = mte.getTypeMirrors();
            }
        }
        List<? extends TypeMirror> set = null;
        if(value != null) {
             set = value.stream().collect(Collectors.toList());
        }

        builder.addStatement("$T<$T> " + middlwareListName + " = new $T<>()",ArrayList.class, MiddlewareExecutor.class, ArrayList.class);
        buildMiddleware(builder, set, middlwareListName);

        builder.addStatement("list.add(new $T($S, com.severell.core.http.HttpMethod.$L, $L, $L))", RouteExecutor.class, path, method, middlwareListName, Lambda.toString());
        routeIndex++;
        return routeIndex;
    }

    private List<? extends TypeMirror> convertToTypeMirrors(Set<? extends Element> elements) {
        return elements.stream().map(Element::asType).collect(Collectors.toList());
    }

    private void buildMiddleware(MethodSpec.Builder builder, List<? extends TypeMirror> value, String middlwareListName) {


        if(value != null) {
            for (TypeMirror mid : value) {
                CodeBlock.Builder middlewareBuilder = CodeBlock.builder();
                Element constr = getConstructor(typeUtils.asElement(mid));

                middlewareBuilder
                        .add("(request, response, container, chain) -> {\n").indent();
                List<? extends VariableElement> parameters = ((ExecutableElement)constr).getParameters();
                ArrayList<String> middlwareParamList = new ArrayList<>();
                resolve(middlewareBuilder, middlwareParamList, parameters);
                middlewareBuilder.addStatement("$T middleware = new $T($L)", mid, mid, StringUtils.join(middlwareParamList.iterator(), ","));
                middlewareBuilder.addStatement("middleware.handle(request, response, chain)");
                builder.addStatement(middlwareListName + ".add(new $T($L))", MiddlewareExecutor.class, middlewareBuilder.unindent().add("}").build().toString());
            }

        }
    }

    public void resolve(CodeBlock.Builder lambdaBuilder, ArrayList<String> paramList, List<? extends VariableElement> params) {
        int count = 0;
        for(VariableElement p : params) {
            if (typeUtils.isSameType(p.asType(), elements.getTypeElement(Request.class.getName()).asType())) {
                paramList.add("request");
            } else if (typeUtils.isSameType(p.asType(), elements.getTypeElement(Response.class.getName()).asType())) {
                paramList.add("response");
            } else if (typeUtils.isSameType(p.asType(), elements.getTypeElement(Session.class.getName()).asType())){
                paramList.add("request.session()");
            } else {
                lambdaBuilder.addStatement("$T p" + count + " = container.make($L)", p, p.asType() + ".class");

                Needs annotation = elements.getTypeElement(p.asType().toString()).getAnnotation(Needs.class);
                boolean hasNeedsAnnotation = annotation != null && Arrays.stream(annotation.value()).filter(need -> "request".equals(need)).findAny().isPresent();
                boolean isSession = typeUtils.isSameType(p.asType(), elements.getTypeElement(Session.class.getName()).asType());
                if(hasNeedsAnnotation || isSession) {
                    lambdaBuilder.addStatement("p" + count + ".setRequest(request)");
                }

                paramList.add("p" + count);
            }
            count++;
        }
    }


    public Element getConstructor(Element clazz){
        for(Element el : clazz.getEnclosedElements()) {
            if(el.getKind() == ElementKind.CONSTRUCTOR) {
                return el;
            }
        }

        return null;
    }

}